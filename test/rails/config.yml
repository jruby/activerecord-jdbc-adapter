default_connection: sqlite3

with_manual_interventions: false

connections:
  jdbcderby:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbch2:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbchsqldb:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbcmysql:
    arunit:
      username: rails
      encoding: utf8
    arunit2:
      username: rails
      encoding: utf8

  jdbcpostgresql:
    arunit:
      insert_returning: <%= ENV['INSERT_RETURNING'] %>
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] %>
      username: <%= ENV['user'] || 'rails' %>
      properties:
        prepareThreshold: <%= ENV['PREPARE_THRESHOLD'] || 1 %>
    arunit2:
      insert_returning: <%= ENV['INSERT_RETURNING'] %>
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] %>
      username: <%= ENV['user'] || 'rails' %>
      properties:
        prepareThreshold: <%= ENV['PREPARE_THRESHOLD'] || 1 %>

  jdbcsqlite3:
    arunit:
      database: <%= FIXTURES_ROOT %>/fixture_database.sqlite3
      timeout:  5000
    arunit2:
      database: <%= FIXTURES_ROOT %>/fixture_database_2.sqlite3
      timeout:  5000

  db2:
    arunit:
      adapter:  ibm_db
      host:     localhost
      username: arunit
      password: arunit
      database: arunit
    arunit2:
      adapter:  ibm_db
      host:     localhost
      username: arunit
      password: arunit
      database: arunit2

  mysql2:
    arunit:
      username: <%= ENV['MY_USER'] || 'rails' %>
      encoding: utf8
      collation: utf8_unicode_ci
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] || 'false' %>
    arunit2:
      username: <%= ENV['MY_USER'] || 'rails' %>
      encoding: utf8
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] || 'false' %>

  postgresql:
    _setup: &_setup
      <% if ENV.key?('INSERT_RETURNING') -%>
      insert_returning: <%= ENV['INSERT_RETURNING'] %> # really should leave it off to no key if not set
      <% end -%>
      <% if ENV.key?('PREPARED_STATEMENTS') -%>
      insert_returning: <%= ENV['PREPARED_STATEMENTS'] %> # should leave it off to its default if not set
      <% end -%>
      username: <%= ENV['PGUSER'] || ENV['user'] || 'rails' %>
      properties:
        # Postgres' JDBC driver does not prepare statements until executed 5 times by default, let's lower:
        prepareThreshold: <%= ENV['PREPARE_THRESHOLD'] || 1 %>
        # to not print (lengthy) traces from driver such as :
        #   SEVERE: Connection error: org.postgresql.util.PSQLException: FATAL: database "xxx" does not exist
        #loggerLevel: OFF # Broken in 42.1.4 thus let's do it manually :
        <% java.util.logging.Logger.getLogger("org.postgresql").setLevel(java.util.logging.Level::OFF) %>
    arunit:
      <<: *_setup
    arunit2:
      <<: *_setup

  sqlite3:
    arunit:
      database: <%= FIXTURES_ROOT %>/fixture_database.sqlite3
      timeout:  5000
    arunit2:
      database: <%= FIXTURES_ROOT %>/fixture_database_2.sqlite3
      timeout:  5000

  sqlite3_mem:
    arunit:
      adapter: sqlite3
      database: ':memory:'
    arunit2:
      adapter: sqlite3
      database: ':memory:'
